import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
} from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
import {
  getDatabase,
  ref,
  set,
  get,
  child,
} from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js";

// üî• –í–°–¢–ê–í –°–Æ–î–ò —Å–≤—ñ–π firebaseConfig ‚Üì
const firebaseConfig = {
  apiKey: "AIzaSyDjfn5HTxD5dYfsps--O5dccRhiTbeW2dA",
  authDomain: "tvereziyvasya.firebaseapp.com",
  projectId: "tvereziyvasya",
  storageBucket: "tvereziyvasya.appspot.com",
  messagingSenderId: "877439507683",
  appId: "1:877439507683:web:6195a466e76dfe768139d6",
  measurementId: "G-6PS48H0S9D",
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getDatabase(
  app,
  "https://tvereziyvasya-default-rtdb.europe-west1.firebasedatabase.app"
);

const daysEl = document.getElementById("days");
const btn = document.getElementById("stayStrongBtn");
const quoteEl = document.getElementById("quote");
const email = document.getElementById("email");
const password = document.getElementById("password");
const registerBtn = document.getElementById("registerBtn");
const loginBtn = document.getElementById("loginBtn");
const userStatus = document.getElementById("userStatus");

let userId = null;

const quotes = [
  "–°–ø—Ä–∞–≤–∂–Ω—è —Å–∏–ª–∞ ‚Äî —Ü–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–±–æ—é.",
  "–ö–æ–∂–µ–Ω –Ω–æ–≤–∏–π –¥–µ–Ω—å ‚Äî —Ü–µ –Ω–æ–≤–∏–π —à–∞–Ω—Å.",
  "–¢–∏ —Å–∏–ª—å–Ω—ñ—à–∏–π, –Ω—ñ–∂ –∑–¥–∞—î—Ç—å—Å—è.",
  "–û–¥–∏–Ω –¥–µ–Ω—å ‚Äî —Ü–µ –≤–∂–µ –ø–µ—Ä–µ–º–æ–≥–∞.",
  "–¢–≤–µ—Ä–µ–∑—ñ—Å—Ç—å ‚Äî —Ü–µ —Å—É–ø–µ—Ä—Å–∏–ª–∞.",
  "–¢–∏ –Ω–µ —Å–∞–º. –¢–∏ –≤ –¥–æ—Ä–æ–∑—ñ –¥–æ –∫—Ä–∞—â–æ–≥–æ —Å–µ–±–µ.",
];
quoteEl.textContent = quotes[Math.floor(Math.random() * quotes.length)];

const dbRef = ref(db);
let soberDays = 0;

// –û–±—Ä–æ–±–∫–∞ –≤—Ö–æ–¥—É
registerBtn.addEventListener("click", () => {
  createUserWithEmailAndPassword(auth, email.value, password.value)
    .then((userCredential) => {
      userId = userCredential.user.uid;
      userStatus.textContent = `–ü—Ä–∏–≤—ñ—Ç, ${email.value}!`;
      loadSoberLog();
    })
    .catch((error) => {
      alert("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: " + error.message);
    });
});

loginBtn.addEventListener("click", () => {
  signInWithEmailAndPassword(auth, email.value, password.value)
    .then((userCredential) => {
      userId = userCredential.user.uid;
      userStatus.textContent = `–í—ñ—Ç–∞—é –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, ${email.value}!`;
      loadSoberLog();
    })
    .catch((error) => {
      alert("–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: " + error.message);
    });
});

function loadSoberLog() {
  if (!userId) return;
  get(ref(db, `users/${userId}/log`)).then((snapshot) => {
    if (snapshot.exists()) {
      const log = snapshot.val();
      updateStats(log);
    } else {
      daysEl.textContent = 0;
    }
  });
}

btn.addEventListener("click", () => {
  if (!userId) {
    alert("–°–ø–µ—Ä—à—É —É–≤—ñ–π–¥–∏!");
    return;
  }
  //–†–æ–∑—à–∏—Ä–∏–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const today = new Date().toISOString().split("T")[0]; //—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD

  get(ref(db, `users/${userId}/log`)).then((snapshot) => {
    let log = snapshot.val() || [];

    if (!log.includes(today)) {
      log.push(today);
      set(ref(db, `users/${userId}/log`), log);
      updateStats(log);
    } else {
      alert("–¢–∏ –≤–∂–µ –Ω–∞—Ç–∏—Å–∫–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ!");
    }
  });
});

//–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(log) {
  log.sort();
  daysEl.textContent = log.length;
  quoteEl.textContent = `"${getMotivationQuote(log.length)}"`;
  drawChart(log);
  updateLevel(log.length);
  updateBadges(log.length);
}

// –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ —Ä—ñ–≤–Ω—ñ
function getMotivationQuote(days) {
  if (days < 3) return "–ü–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ - –Ω–∞–π–≤–∞–∂—á—ñ, –∞–ª–µ —Ç–∏ –≤–∂–µ –π–¥–µ—à!";
  if (days < 7) return "–¢–∏ –≤–∂–µ —Ç–∏–∂–¥–µ–Ω—å –≥–µ—Ä–æ–π! –ü—Ä–æ–¥–æ–≤–∂—É–π!";
  if (days < 30) return "–¢–∏ –º–∞—à–∏–Ω–∞ —Å–∏–ª–∏! –°–∫–æ—Ä–æ –º—ñ—Å—è—Ü—å!";
  if (days < 100) return "–¢–≤–æ—ó –¥–Ω—ñ - —è–∫ –∑–æ–ª–æ—Ç–æ!";
  return "–¢–∏ –ª–µ–≥–µ–Ω–¥–∞! –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è —ñ–Ω—à–∏—Ö!";
}

// –ì—Ä–∞—Ñ—ñ–∫
function drawChart(log) {
  const dates = log.sort();
  const counts = [];

  // –ì—Ä—É–ø—É—î–º–æ –ø–æ –¥–Ω—è—Ö
  const dateMap = {};
  dates.forEach((date) => {
    dateMap[date] = 1;
  });

  // –û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
  const labels = [];
  const data = [];
  for (let i = 6; i >= 0; i--) {
    const d = new Date();
    d.setDate(d.getDate() - i);
    const dateStr = d.toISOString().split("T")[0];
    labels.push(dateStr);
    data.push(dateMap[dateStr] ? 1 : 0);
  }

  const ctx = document.getElementById("soberChart").getContext("2d");
  if (window.myChart) window.myChart.destroy();
  window.myChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: labels,
      datasets: [
        {
          label: "–¢–≤–µ—Ä–µ–∑—ñ –¥–Ω—ñ",
          data: data,
          backgroundColor: "#00b894",
        },
      ],
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          max: 1,
          ticks: {
            stepSize: 1,
            callback: function (value) {
              return value === 1 ? "–¢–∞–∫" : "–ù—ñ";
            },
          },
        },
      },
    },
  });
}

//  –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—ñ–≤–Ω—è
function updateLevel(days) {
  const levelEl = document.getElementById("level");
  const level = Math.floor(days / 7); //–ö–æ–∂–Ω—ñ 7 –¥–Ω—ñ–≤ - –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å
  levelEl.textContent = level;
}

// –ë–µ–π–¥–∂—ñ
function updateBadges(days) {
    const badgesEl = document.querySelector(".badges");
    badgesEl.innerHTML = ''; // –æ—á–∏—â–µ–Ω–Ω—è

    const badgeList = [];

    if (days >= 1) badgeList.push("üèÅ");
    if (days >= 3) badgeList.push("ü•â");
    if (days >= 7) badgeList.push("ü•à");
    if (days >= 14) badgeList.push("ü•á");
    if (days >= 30) badgeList.push("üèÖ");
    if (days >= 100) badgeList.push("üëë");

    badgeList.forEach(badge => {
        const span = document.createElement("span");
        span.textContent = badge;
        badgesEl.appendChild(span);
    });
}

